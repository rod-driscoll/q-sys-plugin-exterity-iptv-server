-- Information block for the plugin
-- Q-Sys plugin for Exterity IPTV server
-- <https://github.com/rod-driscoll/q-sys-plugin-exterity-iptv-server>
-- 20231128 v1.0.0 Rod Driscoll<rod@theavitgroup.com.au>
  -- initial version
-- 20240607 v1.0.1 Rod Driscoll<rod@theavitgroup.com.au>
  -- fix: when more devices defined than exist the channels and playlists now populate all
-- 20240614 v1.0.2 Rod Driscoll<rod@theavitgroup.com.au>
  -- fix: when a display is powered off it sends the power_on command directly to the display as well as the panel_on command
  -- fix: sometimes tv channel logo filenames were being saved wrong in the icon config file
  -- update: clear and update the selected display logo when a new channel or playlist is selected
-- 20240626 v1.0.3 Rod Driscoll<rod@theavitgroup.com.au>
  -- fix: send power command to decoder if the output is a decoder and not a display running the vitec app
  -- fix: when more devices defined than exist the power buttons always works
  -- update: add a blank name to the end of the device list so you can clear a device
  -- update: added LoadLogos button to settings, pressing that will re-load the channels-config.json file
  -- update: added QueryDevices, QueryChannels and QueryPlaylists buttons to settings. These are polled on a timer via PollInterval but you may want to update them manually
  -- update: logos changed to indicators instead of buttons so they can be overlayed on combo boxes for channel select
  -- update: resends a similar inmage after each image to deal with a QSD bug with LED images
  -- update: logos will look for a logo with similar name, searching case insensitive, removing whitespace, sub and super strings  
-- 20240710 v1.0.4 Rod Driscoll<rod@theavitgroup.com.au>
  -- fix: don't load tv channel logo if display is on a non-television playlist
  -- update: keep track of last icon and don't update on poll if not required
  -- update: query devices button clears display icon cache so it forces the icons to update
-- 20240813 v1.0.5 Rod Driscoll<rod@theavitgroup.com.au>
  -- update: removed a few unneccesary whitespaces in lines
  -- fix: log when write files fail
  -- update: changed emulation file path because sub folders aren't working in 9.12.1
  -- update: force to a channel when detecting the player has started and not loaded the previous channel
  -- known issue: there is QSD a bug where images on indicators displays the previous image rather than current
    -- there is currently no way to display logos overlaying combo boxes that works correctly on all UCI platforms
    -- to get a working logo overlaying the combo box; 
      -- create UCI LEDs and copy the component["icon 1"].Legend onto that LED,
      -- and give it a css 'background-color: transparent;' to hide the LED circle gradient
      -- logos won't work in QSD so you'll need to test the icons are working on a live core with UCI viewer or a touch panel

PluginInfo = {
  Name = "Exterity~IPTV Server", -- The tilde here indicates folder structure in the Shematic Elements pane
  Version = "1.0.5",
  Id = "exterity-iptv-server.plugin",
  Description = "Plugin controlling Exterity IPTV",
  ShowDebug = true,
  Author = "Rod Driscoll"
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName()
	return "Exterity IPTV Server " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
local PageNames = {"Setup","System","Devices"} --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
	local props = {}
  table.insert(props,{
    Name = 'Display Count',
    Type = 'integer',
    Min = 1,
    Max = 255,
    Value = 2
  })
  table.insert(props,{
    Name = 'Display Code Name Prefix',
    Type = 'string',
    Value = "Display_"
  })
  table.insert(props,{
    Name  = "Poll Interval",
    Type  = "integer",
    Min   = 5,
    Max   = 255, 
    Value = 60
  })
  table.insert(props,{
    Name    = "Debug Print",
    Type    = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value   = "None"
  })
	return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
	return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name         = "code",
    ControlType  = "Text",
    Count        = 1,
    UserPin      = true,
    PinStyle     = "Input"
  })
  
  -- Configuration Controls --
  table.insert(ctrls, {
    Name         = "IPAddress",
    ControlType  = "Text",
    Count        = 1,
    DefaultValue = "Enter an IP Address",
    UserPin      = true,
    PinStyle     = "Input"
  })
  table.insert(ctrls, {
    Name         = "Username",
    ControlType  = "Text",
    DefaultValue = "admin",
    Count        = 1,
    UserPin      = true,
    PinStyle     = "Input"
  })
  table.insert(ctrls, {
    Name         = "Password",
    ControlType  = "Text",
    DefaultValue = "",
    Count        = 1,
    UserPin      = true,
    PinStyle     = "Input"
  })
  
  -- Status Controls --
  table.insert(ctrls, {
    Name          = "Status",
    ControlType   = "Indicator",
    IndicatorType = Reflect and "StatusGP" or "Status",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  
  -- system configurations --
  table.insert(ctrls, {
    Name         = "DeviceNames",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "ChannelNames",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "PlaylistNames",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "DeviceDetails",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "ChannelDetails",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "PlaylistDetails",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "PlaylistLogo",
    ControlType  = "Indicator",
    IndicatorType= "LED",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "LoadLogos",
    ControlType  = "Button",
    ButtonType   = "Trigger",
    PinStyle     = "Input",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "QueryDevices",
    ControlType  = "Button",
    ButtonType   = "Trigger",
    PinStyle     = "Input",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "QueryChannels",
    ControlType  = "Button",
    ButtonType   = "Trigger",
    PinStyle     = "Input",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "QueryPlaylists",
    ControlType  = "Button",
    ButtonType   = "Trigger",
    PinStyle     = "Input",
    UserPin      = true,
    Count        = 1
  })
    -- Individual Devices --
  table.insert(ctrls, {
    Name         = "DeviceSelect",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "DeviceName",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "ChannelSelect",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PlaylistSelect",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PowerOnChannel",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Details",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "CurrentContent",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "MACAddress",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Address",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Platform",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Online",
    ControlType  = "Indicator",
    IndicatorType= "Led",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "EnableDisplay",
    ControlType  = "Indicator",
    IndicatorType= "Led",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "HasDecoder",
    ControlType  = "Indicator",
    IndicatorType= "Led",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "ExternalDisplayConnected",
    ControlType  = "Button",
    IndicatorType= "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  
  table.insert(ctrls, {
    Name         = "PowerOn",
    ControlType  = "Button",
    ButtonType   = "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PowerOff",
    ControlType  = "Button",
    ButtonType   = "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PowerToggle",
    ControlType  = "Button",
    ButtonType   = "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Logo",
    ControlType  = "Indicator",
    IndicatorType= "LED",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  
    -- Third party display modules --
  table.insert(ctrls, {
    Name         = "DisplayStatus",
    ControlType  = "Indicator",
    IndicatorType= "Status",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "DisplayIPAddress",
    ControlType  = "Text",
    Count        = 1,
    DefaultValue = "Leave blank to disable",
    UserPin      = true,
    PinStyle     = "Input",
    Count        = props['Display Count'].Value
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local logo = ""
  
  local colors = {  
    Background  = {232,232,232},
    Transparent = {255,255,255,0},
    Text        = {24,24,24},
    Header      = {0,0,0},
    Button      = {48,32,40},
    Red         = {217,32,32},
    DarkRed     = {80,16,16},
    Green       = {32,217,32},
    OKGreen     = {48,144,48},
    Blue        = {32,32,233},
    Black       = {0,0,0},
    White       = {255,255,255},
    Gray        = {96,96,96},
    LightGray   = {194,194,194}
  }
  
  layout["code"]={PrettyName="code",Style="None"}  
  
  if(CurrentPage == 'Setup') then
    table.insert(graphics,{Type="GroupBox",Text="Connect",Fill=colors.Background,StrokeWidth=1,CornerRadius=4,HTextAlign="Left",Position={5,5},Size={400,120}})
    table.insert(graphics,{Type="Image",Image=logo,Position={230,45},Size={170,34}})
  
    -- User defines connection properties
    table.insert(graphics,{Type="Text",Text="IP Address"    ,Position={ 15,35},Size={100,16},FontSize=14,HTextAlign="Right"})
    layout["IPAddress"] = {PrettyName="Settings~IP Address" ,Position={120,35},Size={100,16},Style="Text",Color=colors.White,FontSize=12}
  
    table.insert(graphics,{Type="Text",Text="Username"      ,Position={ 15,55},Size={100,16},FontSize=14,HTextAlign="Right"})
    layout["Username"] = {PrettyName="Settings~Username"    ,Position={120,55},Size={100,16},Style="Text",Color=colors.White,FontSize=12}
    
    table.insert(graphics,{Type="Text",Text="Password"      ,Position={ 15,75},Size={100,16},FontSize=14,HTextAlign="Right"})
    layout["Password"] = {PrettyName="Settings~Password"    ,Position={120,75},Size={100,16},Style="Text",Color=colors.White,FontSize=12}
  
    -- Status fields updated upon connect
    table.insert(graphics,{Type="GroupBox",Text="Status",Fill=colors.Background,StrokeWidth=1,CornerRadius=4,HTextAlign="Left",Position={5,135},Size={400,85}})
    layout["Status"] = {PrettyName="Status~Connection Status", Position={40,165}, Size={330,32}, Padding=4 }
    table.insert(graphics,{Type="Text",Text=GetPrettyName(),Position={15,200},Size={380,14},FontSize=10,HTextAlign="Right", Color=colors.Gray})
  
  elseif(CurrentPage == 'System') then 
    layout["PlaylistLogo"] = {PrettyName="Settings~PlaylistLogo"      ,Position={460,  9},Size={180,180},Style="Led",Color=colors.Transparent, StrokeWidth=0, CornerRadius=0 }
    table.insert(graphics,{Type="Text",Text="Query devices"           ,Position={460,200},Size={135, 16},FontSize=14,HTextAlign="Left"})
    layout["QueryDevices"] = {PrettyName="Settings~QueryDevices"      ,Position={604,200},Size={ 36, 16},FontSize=12,Style="Button"}
    table.insert(graphics,{Type="Text",Text="Query channels"          ,Position={460,216},Size={135, 16},FontSize=14,HTextAlign="Left"})
    layout["QueryChannels"] = {PrettyName="Settings~QueryChannels"    ,Position={604,216},Size={ 36, 16},FontSize=12,Style="Button"}
    table.insert(graphics,{Type="Text",Text="Query playlists"         ,Position={460,232},Size={135, 16},FontSize=14,HTextAlign="Left"})
    layout["QueryPlaylists"] = {PrettyName="Settings~QueryPlaylists"  ,Position={604,232},Size={ 36, 16},FontSize=12,Style="Button"}
    table.insert(graphics,{Type="Text",Text="Reload logo config"      ,Position={460,248},Size={135, 16},FontSize=14,HTextAlign="Left"})
    layout["LoadLogos"] = {PrettyName="Settings~LogoLoad"             ,Position={604,248},Size={ 36, 16},FontSize=12,Style="Button"}
  
    table.insert(graphics,{Type="Text",Text="Device names"            ,Position={ 10,  5},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["DeviceNames"] = {PrettyName="Settings~DeviceNames"        ,Position={ 10, 21},Size={140, 16},FontSize=12,Style="ComboBox"}
    table.insert(graphics,{Type="Text",Text="Device details"          ,Position={ 10, 37},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["DeviceDetails"] = {PrettyName="Settings~DeviceDetails"    ,Position={ 10, 53},Size={140,360},FontSize=12,HTextAlign="Left",Style="ListBox"}
  
    table.insert(graphics,{Type="Text",Text="Playlist names"          ,Position={150,  5},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["PlaylistNames"] = {PrettyName="Settings~PlaylistNames"    ,Position={150, 21},Size={140, 16},FontSize=12,Style="ComboBox"}
    table.insert(graphics,{Type="Text",Text="Playlist details"        ,Position={150, 37},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["PlaylistDetails"] = {PrettyName="Settings~PlaylisDetails" ,Position={150, 53},Size={140,360},FontSize=12,HTextAlign="Left",Style="ListBox"}
    
    table.insert(graphics,{Type="Text",Text="Channel names"           ,Position={290,  5},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["ChannelNames"] = {PrettyName="Settings~ChannelNames"      ,Position={290, 21},Size={140, 16},FontSize=12,Style="ComboBox"}
    table.insert(graphics,{Type="Text",Text="Channel details"         ,Position={290, 37},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["ChannelDetails"] = {PrettyName="Settings~ChannelDetails"  ,Position={290, 53},Size={140,360},FontSize=12,HTextAlign="Left",Style="ListBox"}  
  
  elseif(CurrentPage == 'Devices') then 
  
    local offset_= { 530, 176 } -- index, x-offset, y-offset
    local max_rows_ = 15
  
    for i=1, props['Display Count'].Value do
  
      x = offset_[1]*math.floor(((i-1)/max_rows_)+.05)
      y = offset_[2]*math.floor(((i-1)%max_rows_)+.05)
  
      table.insert(graphics,{Type="GroupBox",Text="Device "..i                  ,Position={ 14+x,  5+y},Size={526,172},FontSize=12,HTextAlign="Left",Fill=colors.Background,StrokeWidth=1,CornerRadius=4})
      -- column 1
      table.insert(graphics,{Type="Text",Text="Device select"                   ,Position={ 24+x, 28+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["DeviceName "..i] = {PrettyName="Device "..i.."~DeviceName"        ,Position={136+x, 28+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White,WordWrap=true,IsReadOnly=true}
      layout["DeviceSelect "..i] = {PrettyName="Device "..i.."~DeviceSelect"    ,Position={136+x, 28+y},Size={140, 16},FontSize=12,Style="ComboBox"}
      table.insert(graphics,{Type="Text",Text="Channel select"                  ,Position={ 24+x, 44+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["ChannelSelect "..i] = {PrettyName="Device "..i.."~ChannelSelect"  ,Position={136+x, 44+y},Size={140, 16},FontSize=12,Style="ComboBox"}
      table.insert(graphics,{Type="Text",Text="Playlist select"                 ,Position={ 24+x, 60+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["PlaylistSelect "..i] = {PrettyName="Device "..i.."~PlaylistSelect",Position={136+x, 60+y},Size={140, 16},FontSize=12,Style="ComboBox"}
      
      table.insert(graphics,{Type="Text",Text="Power"                           ,Position={ 24+x, 76+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["PowerOn "..i] = {PrettyName="Device "..i.."~PowerOn"              ,Position={134+x, 76+y},Size={ 36, 16},FontSize=12,Style="Button",Text="ON"}
      layout["PowerOff "..i] = {PrettyName="Device "..i.."~PowerOff"            ,Position={170+x, 76+y},Size={ 36, 16},FontSize=12,Style="Button",Text="OFF"}
      layout["PowerToggle "..i] = {PrettyName="Device "..i.."~PowerToggle"      ,Position={206+x, 76+y},Size={ 36, 16},FontSize=12,Style="Button",Text="TOGGLE"}
      table.insert(graphics,{Type="Text",Text="Current content"                 ,Position={ 24+x, 92+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["CurrentContent "..i] = {PrettyName="Device "..i.."~CurrentContent",Position={134+x, 92+y},Size={140, 32},FontSize=12,Style="Text",Color=colors.White,WordWrap=true,IsReadOnly=true}
  
      table.insert(graphics,{Type="GroupBox",Text="Connected display"           ,Position={ 14+x,124+y},Size={262, 52},FontSize=10,HTextAlign="Left",Fill=colors.Transparent,StrokeWidth=1,CornerRadius=4})
      table.insert(graphics,{Type="Text",Text="Status"                          ,Position={ 24+x,138+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["DisplayStatus "..i] = {PrettyName="Device "..i.."~Display~Status" ,Position={134+x,128+y},Size={140, 30},FontSize=10,Style="Text",IsReadOnly=true,Color=colors.LightGray}
      table.insert(graphics,{Type="Text",Text="IP address"                      ,Position={ 24+x,156+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["DisplayIPAddress "..i] = {PrettyName="Device "..i.."~Display~IPAddress"
                                                                                ,Position={134+x,158+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
  
      -- column 2
      table.insert(graphics,{Type="Text",Text="IP address"                      ,Position={276+x, 28+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["Address "..i] = {PrettyName="Device "..i.."~IPAddress"            ,Position={388+x, 28+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
      table.insert(graphics,{Type="Text",Text="MAC address"                     ,Position={276+x, 44+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["MACAddress "..i] = {PrettyName="Device "..i.."~MACAddress"        ,Position={388+x, 44+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
      table.insert(graphics,{Type="Text",Text="Platform"                        ,Position={276+x, 60+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["Platform "..i] = {PrettyName="Device "..i.."~Platform"            ,Position={388+x, 60+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
      table.insert(graphics,{Type="Text",Text="Device details"                  ,Position={276+x, 76+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["Details "..i] = {PrettyName="Device "..i.."~Details"              ,Position={388+x, 76+y},Size={140, 90},FontSize=12,HTextAlign="Left",Style="ListBox"}
   
      layout["Logo "..i] = {PrettyName="Device "..i.."~PlaylistLogo"            ,Position={280+x, 92+y},Size={104, 74},Style="Led",Color=colors.Transparent, StrokeWidth=0, CornerRadius=0 } 
    end
  
  end;
  return layout, graphics
end

--Start event based logic
if Controls then
   	-----------------------------------------------------------------------------------------------------------------------
  	-- dependencies
  	-----------------------------------------------------------------------------------------------------------------------
  	rapidjson = require("rapidjson")
    helper = require("helpers")
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Variables
  	-----------------------------------------------------------------------------------------------------------------------
  	local SimulateFeedback = true
  	-- Variables and flags
  	local DebugTx=false
  	local DebugRx=false
  	local DebugFunction=false
  
  	-- Timers, tables, and constants
  	QueryTimer = Timer.New()
  	LogoTimer = Timer.New()
  	--Timeout = Properties["Poll Interval"].Value + 10
  	
  	-- Device specific
  	local Path = 'api/public/control'
    local config_filepath = (System.IsEmulating and 'design' or 'media/logos')..'/channel-logos.json'
    local logos_filepath = (System.IsEmulating and 'design' or 'media/logos')..'/'
    local junk = ''
    local devices = {}
  	local channels = {}
  	local playlists = {}
    local playlist_images = {}
  	local displays = {}
    local last_image = {}
  	
  	function ErrorHandler(err)
      print('ERROR:', err)
   	end
  	-----------------------------------------------------------------------------------------------------------------------
    -- Helper functions
  	-------------------------------------------------------------------------------------------------------------------
    -- A function to determine common print statement scenarios for troubleshooting
    function SetupDebugPrint()
      if Properties["Debug Print"].Value=="Tx/Rx" then
        DebugTx,DebugRx=true,true
      elseif Properties["Debug Print"].Value=="Tx" then
        DebugTx=true
      elseif Properties["Debug Print"].Value=="Rx" then
        DebugRx=true
      elseif Properties["Debug Print"].Value=="Function Calls" then
        DebugFunction=true
      elseif Properties["Debug Print"].Value=="All" then
        --DebugTx,DebugRx,DebugFunction=true,true,true
        DebugTx,DebugFunction=true,true,true
      end
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Device control functions
  	-----------------------------------------------------------------------------------------------------------------------
  	function UpdateDeviceControlDetails(device) -- selected device, a table of a single device
  		if DebugFunction then print('DEVICE ', '--------------------------------------') end	
      --[[ local keys_ = { 'id', 'type', 'ip', 'location', 'name', 'platform', 'state', 'mac', 'room', 'platform_name', 'lock_flag', 'status', 'flatMac', 'last_executed_command', 'jobs', 'content' }
      --Controls.DeviceDetails.Choices = helper.UpdateItemsInArray(device, keys_)  --this is an option to display less data ]]
      Controls.DeviceDetails.Choices = helper.UpdateItems(device)
  	end
  
  	function GetPowerAndChannel(device) -- a single device
  		if DebugFunction then print('GetPowerAndChannel('..device.name..')') end
      local return_ = { ['channel'] = "", ['power'] = false, ['jobs_pending'] = false, ['playlist'] = "", ['is_tv_playlist'] = false, ['no_content'] = false, ['no_content_showing'] = false }
      if type(device.content) == "table" then
        local result_ = xpcall(function()
          if device.content~=nil then
            --TablePrint(device.content, 2)
            if device.content.channel~=nil and device.content.channel.name~=nil then
              --print('channel:', device.content.channel.name)
              return_.channel = device.content.channel.name
              --if device.content.playlist~=nil then tv_chanel_playlist_id = device.content.playlist end
            end   
            if device.content.playlist~=nil then 
              local kvp_  = { ['id'] = device.content.playlist }
              local i, playlist_ = helper.GetArrayItemWithKey(playlists, kvp_)
              if playlist_~=nil and playlist_.name~=nil then
                --print('playlist: '..playlist_.name)
                return_.playlist = playlist_.name
                for i,v in ipairs({ 'tv', 'television', 'channel' }) do
                  local x =string.find(string.lower(playlist_.name), v)
                  if string.find(string.lower(playlist_.name),v)~=nil then 
                    return_.is_tv_playlist = true
                  end
                end
              end          
            end
            --print('standby state:', device.content.standby, 'type:', type(device.content.standby))
            if type(device.content.standby) == "string" then
              return_.power = not (device.content.standby == "Standby") -- "Unknown" is ON
            elseif type(device.content.standby) == "boolean" then
              return_.power = not device.content.standby
            elseif device.content.standby==nil then 
              print('standby is nil')
              if device['type']~=nil and device['type']=='Receiver' then 
                return_.power = true -- can't turn receiveres off
              end
            end
          end
        end
        , ErrorHandler)
        --print('CheckContent result:', result_)
  
        -- need to look at the jobs to figure out the actual state of the device   
        if device['jobs'] then
          --print(#device.jobs..' jobs Type.'..type(device.jobs))
          if #device.jobs > 0 and type(device.jobs) == "table" then
            local found_successful_job_ = false
            for i=1, #device.jobs do
              --print('job['..i..'].status: '..device.jobs[i].status)
              if device.jobs[i].status~=nil then
                if device.jobs[i].status == "PENDING" then return_.jobs_pending = true end
                if device.jobs[i].status == "SUCCESS" and (not found_successful_job_) and device.jobs[i].params~=nil then
                  found_successful_job_ = true
                  local params_ = rapidjson.decode(device.jobs[i].params)
                  print('successful job['..i..'], params type.'..type(params_))
                  if type(params_) == "table" then
                    --if params_.channel.name then print('channel: '..params_.channel.name) end
                    --if params_ and params_.channel and type(params_.channel) .name then 
                    if params_~=nil and params_.channel then -- a channel command
                      --print('type(params_.channel): '..type(params_.channel))
                      if type(params_.channel) == "table" and params_.channel.name then
                        return_.channel = params_.channel.name 
                      end
                    elseif params_ and params_.manifest then -- a signage command
                      return_.channel = "" 
                      --return_.signage = true
                    else
                      if type(params_) == "table" then TablePrint(params_.channel, 2) end
                    end
                  else --  type(params_) == "string"
                    return_.no_content = true -- probably an audio player
                    return_.channel = "" 
                    --return_.signage = false
                  end
                end
              end
            end
          end
        end
        if device.content.channel==nil and device.content.playlist==nil then 
          return_['no_content_showing'] = true
        end
      end
      
      return return_
    end
  
  	function SetDevicePower(i, device, command) -- command == 'Power_on', 
      local display_ = displays[i]
      if DebugFunction then print(command..' selected for', device.name, 'type:'..device['type'], 'platform:'..device['platform_name']) end
      --print('display type('..type(display_)..')') -- serdata
      --if string.len(device['platform_name']) > 0 then -- it is a decoder so blank it
      local command_=nil
      local command2_=nil
      if display_ then -- a display module with the command is connected to the display so use it for power
        if command=='Display_off' then 
          UpdateLogo('', i)    
          if DebugFunction then print('SetDevicePower: cleared image for '..i) end
          if display_['PanelOff']~=nil then 
            command_ = 'PanelOff'
          elseif display_['PowerOff']~=nil then 
            command_ = 'PowerOff'
          end
        elseif command=='Display_on' then 
          if display_['PanelOn']~=nil then 
            command_ = 'PanelOn'
            if display_['PowerStatus']~=nil and not display_['PowerStatus'].Boolean then 
              command2_ = 'PowerOn'
            end
          elseif display_['PowerOn']~=nil then 
            command_ = 'PowerOn'
          end
        end
      end
      if command_ then                                  -- send power to the connected display module
        if command2_ then
          print('sending '..command2_..' to display component, type:', device['type'])
          SetDisplayCommand(display_, command2_, true)
        end
        print('sending '..command_..' to display component, type:', device['type'])
        SetDisplayCommand(display_, command_, true)
      end
      if not display_ or device.type=='UHD Decoder' then -- send power to the decoder
        command_ = command=='Display_off' and 'poweroff' or 'poweron'
        PostRequest(Path.."/devices/"..device['mac'].."/commands/"..command_, '') -- this will reset the channel
        --actually don't power it becaue it comes up in the wrong mode
      end
    end
  
  	function UpdateDisplayModule(i, device) -- device is a single device
      local display_ = nil
      if device~=nil then
        display_ = (device['platform_name'] == nil or (string.len(device['platform_name']) < 1)) and displays[i] -- if there is no platform name then there is no display
      end
      print('UpdateDisplayModule('..i..') component '..(display_==nil and 'is nil' or 'exists'))
      Controls['EnableDisplay'][i].Boolean = display_ ~= nil
  		--Controls['DisplayIPAddress'][i].String = display_ ~= nil and device['ip'] or ''
  		Controls['DisplayIPAddress'][i].IsInvisible = display_ == nil
  		--Controls['DisplayStatus'][i].IsInvisible = display_ == nil
  
      if display_ then 
        print("display["..i.."] module exists - updating controls")
        if display_['IPAddress'] then         
          display_['IPAddress'].String = device['ip']
          Controls['DisplayIPAddress'][i].String = display_['IPAddress'].String
        end
        -- power
        local power_status_ = false
        if display_['PanelStatus'] then 
          if display_['PowerStatus'] then 
            power_ = display_['PanelStatus'].Boolean and display_['PowerStatus'].Boolean 
          else
            power_ = display_['PanelStatus'].Boolean
          end
        elseif display_['PowerStatus'] then
          power_ = display_['PowerStatus'].Boolean
        end
        if display_['PowerStatus'] then 
          if not display_['PanelStatus'] then 
            --display_['PowerStatus'].EventHandler = function(ctl) 
            --  print('Display PowerStatus ['..i..']: '..tostring(ctl.Boolean))
            --end
          end
        end
        Controls['PowerToggle'][i].Boolean = power_
        Controls['PowerOn'    ][i].Boolean = power_
        Controls['PowerOff'   ][i].Boolean = not power_
        -- connection
        if display_['Status'] then 
          Controls['DisplayStatus'][i].Value = display_['Status'].Value
          Controls['DisplayStatus'][i].String = display_['Status'].String
        end
      else 
        print("display["..i.."] module doesn't exist - updating controls")
        Controls['DisplayIPAddress'][i].IsInvisible = true
        Controls['DisplayIPAddress'][i].String = ''
        --Controls['DisplayStatus'][i].IsInvisible = true
        Controls['DisplayStatus'][i].Value = 3 -- 3: not present
        Controls['DisplayStatus'][i].String = 'No display connected'
        --display_['IPAddress'].String = ''
      end
      return display_
    end 
  
  	function UpdateDevice(i, device) -- device is a single device
      if device==nil then
        if DebugFunction then print('UpdateDevice('..i..'): nil') end
          Controls['Address'][i].String = ''
          Controls['MACAddress'][i].String = ''       
          Controls['Online'][i].Boolean = false
          Controls['Details'][i].Choices = {}
          Controls['DeviceSelect'][i].String = ''
          Controls['DeviceName'][i].String = ''
          Controls['Platform'][i].String = ''
          Controls['HasDecoder'][i].Boolean = false
          Controls['PlaylistSelect'][i].String = ''
          --Controls['PlaylistSelect'][i].Choices = {}
          Controls['ChannelSelect'][i].String = ''
          --Controls['ChannelSelect'][i].Choices = {}
          Controls['CurrentContent'][i].String = ''
          Controls['PowerOn'][i].Boolean = false
          Controls['PowerOff'][i].Boolean = false
          Controls['PowerToggle'][i].Boolean = false
          UpdateLogo('', i)
          UpdateDisplayModule(i, device)
      else
        if DebugFunction then print('UpdateDevice('..i..'): '..device['name']) end
        Controls['Address'][i].String = device['ip']
        Controls['MACAddress'][i].String = device['mac']        
        Controls['Online'][i].Boolean = (device['status'] == 'online')
        Controls['Details'][i].Choices = helper.UpdateItems(device)
        Controls['DeviceSelect'][i].String = device['name']
        Controls['DeviceName'][i].String = device['name']
        Controls['HasDecoder'][i].Boolean = (string.len(device['platform_name']) > 0)
        local display_ = UpdateDisplayModule(i, device)
        if string.len(Controls['Details'][i].String) > 0 then
          Controls['Details'][i].String = helper.GetValueStringFromTable(device, Controls['Details'][i].String)
        else
          Controls['Details'][i].String = helper.GetValueStringFromTable(device, "mac: ")
        end
        if string.len(device['platform_name']) > 0 then
          Controls['Platform'][i].String = device['platform_name']
        end
      
        --CheckContent(device)
        --print('trying to update channel from device')
        local status_ = {}
        if type(device.content) == "table" then
          status_ = GetPowerAndChannel(device)
          if DebugFunction then print('channel: '..status_.channel..', is_tv_playlist: '..tostring(status_.is_tv_playlist)..', power: '..tostring(status_.power)..', playlist: '..tostring(status_.playlist)..', signage: '..tostring(status_.signage)..', jobs_pending: '..tostring(status_.jobs_pending)) end
          Controls['PlaylistSelect'][i].String = status_.playlist
          if display_==nil then
            Controls['PowerOn'][i].Boolean = status_.power
            Controls['PowerOff'][i].Boolean = not status_.power
          end
  
          if status_.power then -- power on
            if status_.playlist and #status_.playlist>0 then
              if DebugFunction then print('is playlist['..#status_.playlist..']: '..tostring(status_.playlist)) end
              local kvp_  = { ['name'] = status_.playlist }
              local p, playlist_ = helper.GetArrayItemWithKey(playlists, kvp_)
              if p then 
                UpdateLogo(playlist_images[p], i)
                if DebugFunction then print('UpdateDevice( '..i..') UpdateLogo with playlist done') end
              end
            else
              --if DebugFunction then print('not playlist: '..status_.playlist) end
              --UpdateLogo('', i)
              --if DebugFunction then print('UpdateDevice: cleared image for '..i) end
            end
            
            if string.len(status_.channel) > 0 and not status_.jobs_pending then -- channel exists, set feedback
              if DebugFunction then print('channel not empty, power is on, no jobs pending') end
              if not (status_.playlist and #status_.playlist>0) then
                Controls['ChannelSelect'][i].String = status_.channel 
                Controls['CurrentContent'][i].String = status_.channel
                Controls['PowerOnChannel'][i].String = status_.channel
                if status_.no_content_showing and device.status == 'online' then -- the player is showing the app icon and no logo, this happens when the app starts
                  if DebugFunction then print("setting channel - because the system doesn't recall the previous channel on power up") end
                  SetChannel(i, status_.channel) --Controls['ChannelSelect'][i]:Trigger()
                end              --tv_channel_logos
                get_tv_channel_image(status_.channel, i)
                Controls['Logo'][i].Color = "#00FFFFFF" -- transparent
  
              end
            else -- need to force it to a channel
              if status_.is_tv_playlist and Controls['ChannelSelect'][i] and string.len(Controls['ChannelSelect'][i].String) > 0 then --it's on a blank channel, have to clear selector before forcing it
                if string.len(Controls['PowerOnChannel'][i].String) < 1 then -- the power on channel is blank
                  Controls['PowerOnChannel'][i].String = Controls['ChannelSelect'][i].String -- give it a channel to return to in a moment
                end
                if device.status == 'online' then
                  if DebugFunction then 
                    print("setting power on channel - because the system doesn't recall the previous channel on power up")
                    print("playlist: "..status_.playlist)
                  end
                  Controls['ChannelSelect'][i].String = Controls['PowerOnChannel'][i].String -- force the Event
                  Controls['CurrentContent'][i].String = Controls['PowerOnChannel'][i].String
                  SetChannel(i, status_.channel) --Controls['ChannelSelect'][i]:Trigger()
                end
              elseif not status_.is_tv_playlist then
                if DebugFunction then print('not in TV channel playlist: '..status_.playlist..', clearing the current and startup channels') end
                Controls['ChannelSelect'][i].String = "" -- clear the strings
                --Controls['ChannelSelect'][i].String = status_.playlist -- try inserting the playlist name
                Controls['PowerOnChannel'][i].String = ""
                Controls['CurrentContent'][i].String = status_.playlist
                --[[
                local kvp_  = { ['name'] = status_.playlist }
                local p, playlist_ = helper.GetArrayItemWithKey(playlists, kvp_)
                Controls['Logo'][i].Style = playlist_images[p]
                --Controls['Logo'][i].Color = "#00FFFFFF" -- transparent
                ]]--
              end
            end
          else -- power off
            if string.len(Controls['ChannelSelect'][i].String) > 0 then
              Controls['ChannelSelect'][i].String = status_.channel -- clear the string so we can force an event when we set it again
              Controls['CurrentContent'][i].String = status_.channel
              UpdateLogo('', i)
              if DebugFunction then print('Power off: cleared image for '..i) end
            end 
          end
          if string.len(status_.channel) > 0 and not status_.jobs_pending then
            if DebugFunction then print('channel not empty') end
            Controls['PowerOnChannel'][i].String = status_.channel
          end
        else 
          if DebugFunction then print("UpdateDevice - Type("..type(device.content)..") doesn't contain any channel or playlist data") end
          UpdateLogo('', i)
          if DebugFunction then print('no data: cleared image for '..i) end
          if display_==nil then
            Controls['PowerOn'][i].Boolean = false
            Controls['PowerOff'][i].Boolean = false
          end
          Controls['CurrentContent'][i].String = ""
        end
  
      end
      
      function SetDisplayCommand(display, command, value) -- (table, 'Power_On', true) -- data is a single device
        if DebugFunction then print('SetDisplayCommand('..command..','..tostring(value)..')') end
        if display[command] then -- if component control exists
          if type(value) == 'boolean' then
            display[command].Boolean = value
          elseif  type(value) == 'string' then
            display[command].String = value
          elseif  type(value) == 'table' then
            display[command].Choices = value
          else
            display[command].Value = value
          end
        end
      end
    end
  
  	function AssignDevice(i, device) -- device is a single device
      if DebugFunction then 
        if device then print('AssignDevice('..i..'): ', device['name'])
        else           print('AssignDevice('..i..'): device is nil') end
      end
  		if device and device.name then
        Controls['DeviceSelect'][i].String = device['name'] -- assign it to a device
  			Controls['DeviceName'][i].String = device['name']
  		  --print('assigned ['..i..'] name:', device[i]['name'], 'to device', Controls['DeviceSelect'][i].String..i)
      else
        Controls['DeviceSelect'][i].String = ''
  			Controls['DeviceName'][i].String = ''
      end
      UpdateDevice(i, device)     
    end
  	
  	function CheckContent(device) -- device is a single device
  		if DebugFunction then print('CheckContent()') end
  		--TODO
  	end
  
  	function UpdateDeviceData(i) -- i is the index in devices[i]
  		if DebugFunction then print('UpdateDeviceData('..i..')') end
  		--Controls['DeviceSelect'][i].Choices = Controls.DeviceNames.Choices -- update the device selector choices
  		--if DebugFunction then print('#Controls["DeviceSelect"]:'..#Controls['DeviceSelect']) end
  		-- find all components with the same id
  		local found_ = false
  		for j=1, #Controls['DeviceSelect'] do --iterate through all devics in data
  			-- look for ID in Device_details
  	 		--if DebugFunction then print('Controls["DeviceSelect"]['..j..']:'..Controls['DeviceSelect'][j].String..' - checking for ID - found_: '..tostring(found_)) end
  		  if not found_ then
          if Controls['DeviceSelect'][j].String == devices[i].name then
   		      --if DebugFunction then print('UpdateDevice('..j..',devices['..i..'])') end
  					UpdateDevice(j, devices[i]) --update existing device
    				found_ = true
          elseif Controls['Details'][j].Choices == nil then
   		      if DebugFunction then print('Controls["Details"]['..j..'].Choices == nil') end
          elseif #Controls['Details'][j].Choices>0 then -- if device Control exists
  					local id_ = helper.GetChoicesItem(Controls['Details'][j].Choices, 'id') -- this will return the id of the component device, e.g. '657536578'       
  				  --print('Control['..j..']: "'..id_..'", device['..i..']: "'..devices[i].id..'"')
  					if (id_ and id_ == devices[i].id) or Controls['DeviceSelect'][j].String == devices[i].name then -- if this matches the device update it
  						--print('Update ['..i..'] '..Controls['DeviceSelect'][j].String)
  						UpdateDevice(j, devices[i]) --update existing device
  						--AssignDevice(j, devices[i])
  						found_ = true
  					end
  				end
  			end
  		end
      
      if not found_ then -- this is a new device, put it into the next empty component
        if DebugFunction then print('NEW DEVICE ['..i..'] '..devices[i].name..' id: '..devices[i].id) end--found the device, now find all matches
        found_ = false
        for j=1, #Controls['DeviceSelect'] do --iterate through all devics in data
          if not found_ then -- go until an empty one is found
            if string.len(Controls['DeviceSelect'][j].String) < 1 then -- an unassigned component
              AssignDevice(j, devices[i])
              found_ = true -- stop looking for more unassigned components
            end
          end
        end
        if not found_ then
          if DebugFunction then print('NOT ASSIGNED ['..i..'] '..devices[i].name..' id: '..devices[i].id) end
        end
      end
    end
  
    function GetDeviceData(i) -- devices is the data. i is the component index
      if Controls['DeviceSelect'][i].String~=nil and Controls['DeviceSelect'][i].String~="" then -- e.g. "Dining"
        -- find the item in the data table where "name":"Dining" 
        if DebugFunction then print("GetDeviceData("..i.."): ".. Controls['DeviceSelect'][i].String) end
        local kvp_  = { ['name'] = Controls['DeviceSelect'][i].String }
        local j, device_ = helper.GetArrayItemWithKey(devices, kvp_)
        if DebugFunction then 
          if device_==nil then
            print("GetDeviceData("..i.."): ".. Controls['DeviceSelect'][i].String.." NOT FOUND in "..#devices.. " devices") 
          else
            print("GetArrayItemWithKey() ["..j.."]: ".. device_.name)
          end
        end
        return j, device_
      end
    end
  
    function UpdateDeviceNames(data)  -- data is an array of devices
      local names_ = {}
      local assigned_idx_ = 0
      for a,b in ipairs(data) do --iterate through devices and create a table of names to update Choices
        if b['name'] then table.insert(names_, b['name']) end   
        --[[ -- this is just for debugging
        if b['name'] then  print('[1].name: ',b['name']) end
        if b['ip'] then table.insert(uris_, b['ip']) end   
        if b['mac'] then table.insert(macs_, b['mac']) end
        for k,v in pairs(b) do
          if a == 1 then print('['..a..']', k) end --print all keys
        end --]]
        -- assign unassigned devices to unassigned controls
        -- look for the first control that is either empty or contains this device
        for i=1, #Controls['DeviceSelect'] do
          if Controls['DeviceSelect'][i].String=="" then AssignDevice(i,data[i]) break --unassigned so assign
          elseif Controls['DeviceSelect'][i].String==b['name'] then break end -- assigned so stop looking
        end
      end
      table.insert(names_, '') -- add a blank name to the end so you can clear a device
      Controls.DeviceNames.Choices = names_
      for i=1, #Controls['DeviceSelect'] do
  		  Controls['DeviceSelect'][i].Choices = Controls.DeviceNames.Choices -- update the device selector choices
      end
    end
    
    function UpdateDisplayPowerStatus(i)
      if displays~=nil and displays[i]~=nil then
        local power_ = false
        if displays[i]['PowerStatus']~=nil and displays[i]['PanelStatus']~=nil then
          power_ = displays[i]['PowerStatus'].Boolean and displays[i]['PanelStatus'].Boolean
        elseif displays[i]['PowerStatus']~=nil then
          power_ = displays[i]['PowerStatus'].Boolean
        elseif displays[i]['PanelStatus']~=nil then
          power_ = displays[i]['PanelStatus'].Boolean
        end
  
        Controls['PowerToggle'][i].Boolean = power_
        Controls['PowerOn'][i].Boolean = power_
        Controls['PowerOff'][i].Boolean = not power_
      end
    end
  
    local logoQueue = {}
  
    function QueuLogoUpdate(data, control) 
      -- need to wait and send another value because the logo item has a bug where it always displays the previous sent image [QSD 9.10.2]
      -- so we are re-sending a placeholder between images.
      local item_ = {}
      item_['control'] = control
      item_['ttl'] = 5 -- time to live in passes
      item_['data'] = data
      --iterate backwards so removing items doesn't screw the iteration
       --clear existing instances in queue
      for i = #logoQueue, 1, -1 do
        if (logoQueue[i].control == control) then table.remove(logoQueue, i) end
      end
      --add item to queue
      table.insert(logoQueue, item_)
      if DebugFunction then print("QueuLogoUpdate adding #"..#logoQueue) end
  
      if not LogoTimer:IsRunning() then
        LogoTimer.EventHandler = function(timer) -- EventHandler
          for i = #logoQueue, 1, -1 do 
            logoQueue[i].ttl = logoQueue[i].ttl-1
            if logoQueue[i].ttl==0 then
              local ctl_ = logoQueue[i].control
              if type(ctl_)=='number' then ctl_ = Controls['Logo'][ctl_] end
              if ctl_~=nil then
                if logoQueue[i].data=='' then ctl_.Legend = ''
                else
                  -- modify a single character in the string and send, hopefully it creates a new image so similar to the original image that it is not noticeable
                  local posToModify_ = 3
                  local data_ = logoQueue[i].data
                  if #data_ > posToModify_ then
                    local pos_ = #data_-posToModify_ 
                    local char_ = data_:sub(pos_,pos_) 
                    local byte_ = char_:byte()
                    byte_ = byte_ + 1
                    data_ = logoQueue[i].data:sub(1,pos_-1)..string.char(byte_)..logoQueue[i].data:sub(pos_+1)
                  end               
                  ctl_.Legend = rapidjson.encode({IconData = Crypto.Base64Encode(data_)})
                  ctl_:Trigger() --ctl_.Boolean = not ctl_.Boolean -- .Legend property doesn't evoke an event
                end
              end
              table.remove(logoQueue, i)
              if DebugFunction then print("QueuLogoUpdate remove #"..#logoQueue) end
            end
          end
        end
        LogoTimer:Start(0.1)
      else
        --print("Logo timer is already running")
      end
    end
  
    function UpdateLogo(data, control)
      local ctl_ = control
      if type(ctl_)=='number' then ctl_ = Controls['Logo'][ctl_] end
      if ctl_~=nil then
  
        if last_image[ctl_]~=nil and last_image[ctl_]==data then -- don't refresh with the same image
          if DebugFunction then print("UpdateLogo: refreshing with the same image") end
        end 
        --else  
          last_image[ctl_] = data
          --if not helper.equals(Controls.PlaylistLogo.Style, data, false) then
          if data and #data > 0 then
            ctl_.Legend = rapidjson.encode({IconData = Crypto.Base64Encode(data)})
            --ctl_.Boolean = not ctl_.Boolean -- .Legend property doesn't evoke an event
            ctl_:Trigger()
          else ctl_.Legend = '.' end -- needs to be a non whitespace character or it doesn't work
          --[[ removing this because the issue only exists in QSD and the fix screws up the actual UCI
            QueuLogoUpdate(data, control) 
            control.Style = val                           -- Style works on buttons but not on LEDs
            if val~='' then control.Color = "#00FFFFFF"   -- transparent
            else            control.Color = "#808080" end -- grey
          ]]
        --end
      end
    end
  
    function SetChannel(device, name)
      local i, device_ = GetDeviceData(device)
      if DebugFunction then print('channel selected['..device..'] "'..name..'" for '..device_['name']..' type: '..device_['type']..' platform: '..device_['platform_name']) end
      if string.len(name) > 0 then
        --get channel uri
        local kvp_  = { ['name'] = name }
        local j, channel_ = helper.GetArrayItemWithKey(channels, kvp_)
        if channel_~=nil then
            Controls['CurrentContent'][device].String = name
            UpdateLogo('', device)
            if DebugFunction then print('channel select: cleared image for '..device) end
            if Controls['PowerOn'][device].Boolean then
              get_tv_channel_image(name, device)
            end
          PostRequest(Path.."/devices/"..device_['mac'].."/commands/channel", '{"uri":"'..channel_['uri']..'"}')
        end
      end
    end
  
    function load_event_handlers()
      for i=1, Properties['Display Count'].Value do
  
        Controls['DeviceSelect'][i].EventHandler = function(ctl) -- device select
          print('device selected',  ctl.String) -- e.g. 'Bar 1', we don't know what module it came from       
          local j, device_ = GetDeviceData(i)
          AssignDevice(i, devices[j])
        end
      
        Controls['ChannelSelect'][i].EventHandler = function(ctl) -- channel select
          SetChannel(i, ctl.String)
        end
        
        Controls['PlaylistSelect'][i].EventHandler = function(ctl) -- playlist select 
          local j, device_ = GetDeviceData(i)
          if DebugFunction then print('playlist selected',  ctl.String..'" for '..device_['name']..' type: '..device_['type']..' platform: '..device_['platform_name']) end
          if string.len(ctl.String) > 0 then
            --get playlist id
            local kvp_  = { ['name'] = ctl.String }
            local j, playlist_ = helper.GetArrayItemWithKey(playlists, kvp_)
            if playlist_~=nil and playlist_['id']~=nil then
              UpdateLogo('', i)
              if DebugFunction then print('playlist select: cleared image for '..i) end
              PostRequest(Path.."/devices/"..device_['mac'].."/playlists/"..playlist_['id'], '')
            end
          end
        end
  
        --local decoder "type" items = { 'UHD Decoder', 'Receiver', 'Media Player', 'sssfp5Lfd' }
        Controls['PowerOff'][i].EventHandler = function(ctl) -- power_off
          local _, device_ = GetDeviceData(i)
          if device_~=nil then SetDevicePower(i, device_, 'Display_off') end
        end   
        
        Controls['PowerOn'][i].EventHandler = function(ctl) -- power_on
          local _, device_ = GetDeviceData(i)
          if device_~=nil then SetDevicePower(i, device_, 'Display_on') end
        end
        
        Controls['PowerToggle'][i].EventHandler = function(ctl) -- power_on
          --status_ = GetPowerAndChannel(data)
          local _, device_ = GetDeviceData(i)
          if device_~=nil then SetDevicePower(i, device_,  ctl.Boolean and 'Display_on' or 'Display_off') end
        end  
  
        displays[i] = Component.New(Properties['Display Code Name Prefix'].Value..i) -- eg "Display_1"
        if displays[i] then
          displays[i] = (#Component.GetControls(displays[i]))>0 and displays[i] or nil -- make it nil if it doesn't have any controls
        end
  
        if displays[i] then
          if displays[i]['IPAddress']~=nil then
            displays[i]['IPAddress'].EventHandler = function(ctl) 
              print('Display IPAddress ['..i..']: '..tostring(ctl.String))
              Controls['DisplayIPAddress'][i].String = ctl.String
            end
          end
          if displays[i]['PanelStatus']~=nil then
            displays[i]['PanelStatus'].EventHandler = function(ctl) 
              print('Display PanelOnStatus ['..i..']: '..tostring(ctl.Boolean))
              UpdateDisplayPowerStatus(i)
            end
          end
          if displays[i]['PowerStatus']~=nil then
            displays[i]['PowerStatus'].EventHandler = function(ctl) 
              print('Display PowerStatus ['..i..']: '..tostring(ctl.Boolean))
              UpdateDisplayPowerStatus(i)
            end
          end
          if displays[i]['Status']~=nil then
            displays[i]['Status'].EventHandler = function(ctl) 
              print('Display ConnectionStatus ['..i..']: '..ctl.String)
              Controls['DisplayStatus'][i].Value = ctl.Value
              Controls['DisplayStatus'][i].String = ctl.String
            end
          end
        end
      end
    end
  
   -----------------------------------------------------------------------------------------------------------------------
  	-- Parse devices
  	-----------------------------------------------------------------------------------------------------------------------
  	function ParseDevice(device)  -- data is a single device
  		if DebugFunction then print('device data response: '..device['name']) end
  		local found_ = false
  		for i=1, #devices do --each device
  			if devices[i]['id'] == device['id'] then
          if not helper.equals(devices[i], device[i], false) then
            if DebugFunction then print('Updating data in device ['..i..']: '.. devices[i]['name']) end
            devices[i] = device -- replace device
            --CheckContent(devices[i]) -- this works
            UpdateDeviceData(i)
          else
            print('data in device ['..i..']: '.. devices[i]['name']..'does not need updating')
          end
  				found_ = true
  			end
  		end
  		if not found_ then
  			table.insert(devices, data) 
  			UpdateDeviceNames(devices)
  			UpdateDeviceData(#devices) -- update the last device
  		end
  	end
  
  	function ParseDevices(data)  -- data is an array of devices
  		if DebugFunction then print('ParseDevices', #data.. ' devices found') end
      if not helper.equals(devices, data, false) then
        print('updating devices')
        local changed_ = false
        for k,v in pairs(data) do
          if devices[k] == nil then
            devices[k] = v
            changed_ = true
          else
            for k1,v1 in pairs(v) do
              if not (k1 == 'jobs' or k1 == 'content') then -- don't overwrite jobs and content with null
                if not helper.equals(devices[k][k1], v1, false) then
                  devices[k][k1] = v1
                  changed_ = true
                end
              end
            end
          end
        end 
        --devices = data
        if changed_ then UpdateDeviceNames(devices) end
          --[[ DON'T iterate through devices and assign devices, because it causes a maximum execution error
          -- let it poll the devices one at a time so each device is assigned on a different task
          for i=1, #data do --each device
            UpdateDeviceData(i)
          end ]]
      else
        print('devices do not need updating: '..#devices..' devices exist')
      end
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- TV channel logos
  	-----------------------------------------------------------------------------------------------------------------------
    local tv_channel_logos = {
      Nightlife = {
        url = "https://www.nightlife.com.au/wp-content/uploads/2021/11/LOGO_BRAND_LIGHT.png",
        file = ""
        -- "{\"IconData\":\"\"}",
      },
      Keno = {
        url = "https://www.keno.com.au/assets/images/logo-keno.svg",
        file= ""
      },
      ["ABCTV HD"] = {
        url = "https://static.wikia.nocookie.net/logopedia/images/2/25/ABC_TV_2021.svg/revision/latest?cb=20210101035040",
        file= ""
      }
    }
  
    function write_config(path, tbl)
      local json_string = rapidjson.encode(tbl)
      if DebugFunction then print("write_config size: "..#json_string) end
      --print("write_config: "..json_string)
      if DebugFunction then print("config type: "..type(tbl)) end
      --helper.TablePrint(tbl)
      local file = io.open(path, "w")
      if file then
        file:write(json_string)
        file:close()
      else
        print('ERROR: write config file path: '..path)
      end
    end
  
    function get_filename_from_url(url)
      if DebugFunction then print("get_filename_from_url: "..url) end    
      local last_dot_index = url:find("%.[^%.]*$")
      local last_slash_index = url:sub(1, last_dot_index - 1):find("/[^/]*$")
      local filename_ = url:sub(last_slash_index+1)
      --if DebugFunction then print("filename: "..filename_) end
      local filename_ = filename_:match("^[^?=%/]+")
      local filename_ = HttpClient.DecodeString(filename_)
      if DebugFunction then print("filename: "..filename_) end
     return filename_
    end
  
    function save_logo_to_file(name, data)
      local file = io.open(logos_filepath..name, "wb")
      if file then
        file:write(data)
        file:close()
      else
        print('ERROR: save_logo_to_file path: '..logos_filepath..name)
      end
    end
  
    function get_tv_channel_logo(logo_tbl, key, control)
      url = logo_tbl[key]["url"]
      if DebugFunction then print('get_tv_channel_logo: '..url) end
      HttpClient.Download({ 
        Url          = url,
        Method       = "GET",
        Headers      =  { ["Accept"] = "*/*" } ,
        User         = Controls["Username"].String or "",  -- Only needed if device requires a sign in
        Password     = Controls["Password"].String or "",  -- Only needed if device requires a sign in
        Timeout      = RequestTimeout,
        EventHandler = function(tbl, code, data, err, headers)
          if DebugFunction then print("TV logo HTTP Response code: " .. code) end
          if code == 200 then  -- Vaild response
            if DebugFunction then 
              print('received image for '..key..' #'..#data)
              print('UpdateLogo for '..key..' url: '..url)
            end
            local filename_ = get_filename_from_url(url)
            UpdateLogo(data, control)
            if DebugFunction then print('1-get_tv_channel_logo: UpdateLogo for '..key..', '..filename_..' - len: '..#data) end
  
            if filename_ ~= Controls.IPAddress.String then -- sometimes the regex screws up and returns the IPAddress instead of the filename
              logo_tbl[key]["file"] = filename_
              write_config(config_filepath, logo_tbl)
              save_logo_to_file(filename_, data)
            end
          end
        end
      })
    end
   
    function GetTvChannelName(name) -- check for similar names
      if tv_channel_logos[name] then return name end
      local name_ = name:lower():gsub("%s+", "") -- lowercase and remove whitespace
      if tv_channel_logos[name_] then return name end
      for k,v in pairs(tv_channel_logos) do
        local k_ = k:lower():gsub("%s+", "")
        if name_ == k_ then return k end -- "NightLife" or "Nightlife"
        if name_:match(k_) then return k end -- "ABC" <-> "ABC HD"
        if k_:match(name_) then return k end -- "ABC HD" <-> "ABC"
      end
    end
  
    function get_tv_channel_image(name, control) 
      local name_ = string.gsub(name, "^%s*(.-)%s*$", "%1") -- trim whitespace from filename
      if DebugFunction then print("get_tv_channel_image: '"..name_.."'") end --"get_tv_channel_image: 'ABC NEWS'"
      --print("Nightlife url: "..tv_channel_logos.Nightlife.url)
      if tv_channel_logos['FoxSports503HD'] then
        --print("FoxSports503HD url: "..tv_channel_logos.FoxSports503HD.url)
      else 
        if DebugFunction then 
          --print('tv channel config file not loaded') 
          if System.IsEmulating then load_tv_channel_images() end
        end
  	  end
      name_ = GetTvChannelName(name_)
      if tv_channel_logos[name_] then 
        if DebugFunction then print('channel '..name_..' logo exists') end
        local file_ = nil
        if tv_channel_logos[name_].file and tv_channel_logos[name_].file ~= '' then
          if DebugFunction then print('get_tv_channel_image: '..tv_channel_logos[name_].file) end
          file_ = io.open(logos_filepath..tv_channel_logos[name_].file, "rb")   
          if file_==nil then
            print('logo file not found on device')           
          else -- file exists
            local data_ = file_:read("*a")
            if data_ and #data_ then
              UpdateLogo(data_, control)     
              if DebugFunction then print('1-get_tv_channel_image: UpdateLogo for '..name_..', '..tv_channel_logos[name_].file..' - len: '..#data_) end
              io.close(file_)
            else 
              print('logo file empty')
              io.close(file_)
              file_ = nil
            end
          end
        end
        if file_==nil and tv_channel_logos[name_].url then
          --print('url: '..get_tv_channel_image[name_]["url"]) 
          tv_channel_logos[name_].file = ''
          get_tv_channel_logo(tv_channel_logos, name_, control)
        end
      end
    end
  
    function read_config(path, file)
      if DebugFunction then print('read_config: '..path) end
      local f = io.open(path, "r")   
      if f~=nil then -- file exists
        io.close(f)
        local config = rapidjson.load(path)
        if config then
          if DebugFunction then
            local i = 0
            for _ in pairs(config) do i=i+1 end 
            print("config loaded size: "..i..", type: "..type(config))
          end --helper.TablePrint(config)
          --print("nightlife url: "..config.Nightlife.url)
        else
          print("config file not loaded: "..path)
        end
        return config
      else 
        if DebugFunction then print('file not found') end
        return nil
      end
    end
  
    function load_tv_channel_images()   
      tv_channel_logos = read_config(config_filepath) or tv_channel_logos
    end
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse channels
  	-----------------------------------------------------------------------------------------------------------------------
  	function ParseChannels(data) -- data is an array of channels
  		if DebugFunction then print('channel data response: '..#data..' channels found') end	
      if not helper.equals(channels, data, false)
          or (Controls["ChannelSelect"][1]~=nil and #Controls["ChannelSelect"][1].Choices==0) then
        print('updating channels')
        channels = data
        local names_ = {}
        for a,b in ipairs(data) do
          --if a == 1 then PrintChannel(data[a]) end
          if b['name'] then
            --print('['..a..']', 'name:', b['name'])
            table.insert(names_, b['name'])
          end   
        end  
        Controls.ChannelNames.Choices = names_
        for i=1, #Controls['ChannelSelect'] do -- update channel list in the device modules
          if Controls["ChannelSelect"][i]~=nil then -- if device component exists
            Controls["ChannelSelect"][i].Choices = names_ -- update the device selector choices
          end
          if Controls["PowerOnChannel"][i]~=nil then -- if device component exists
            Controls["PowerOnChannel"][i].Choices = names_ -- update the device selector choices
          end
        end
      else
        print('channels do not need updating: '..#channels..' channels exist')
      end
    end
  
    function UpdateChannelControlDetails(channel)
      if DebugFunction then print('CHANNEL --------------------------------------') end
      --[[ this is an option to display less data
      local keys_ = { 'name', 'uri', 'group', 'icon', 'channelid', 'address', 'stream', 'redundancy', 'groups', 'type', 'source', 'interface', 'bandwidth', 'language', 'definition', 'number' }
      Controls.Channel_details.Choices = helper..UpdateItemsInArray(channel, keys_)  --this is an option to display less data ]]
      local details_ = helper.UpdateItems(channel)
      Controls.ChannelDetails.Choices = helper.UpdateItems(channel)
      get_tv_channel_image(channel.name, Controls.PlaylistLogo)
  
      if DebugFunction then 
        print('--------------------------------------')
        --helper.TablePrint(details_)
        --print("name: "..channel.name)
      end
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse Playlists
  	-----------------------------------------------------------------------------------------------------------------------
  	function ParsePlaylists(data) -- data is an array of playlists
  		if DebugFunction then print('playlist data response: '..#data..' playlists found') end
      if not helper.equals(playlists, data, false) then
        print('updating playlists')
        playlists = data
        local names_ = {}
        for a,b in ipairs(data) do
          --if a == 1 then PrintChannel(data[a]) end
          if b['name'] then
            --print('['..a..']', 'name:', b['name'])
            table.insert(names_, b['name'])
          end 
          UpdatePlaylistControlDetails(b.name)
        end
        Controls.PlaylistNames.Choices = names_
        for i=1, #Controls['PlaylistSelect'] do -- update channel list in the device modules
          if Controls['PlaylistSelect'][i]~=nil then
            Controls['PlaylistSelect'][i].Choices = names_ -- update the device selector choices
          end
        end
      else
        print('playlists do not need updating: '..#playlists..' playlists exist')
      end
    end
  
    function UpdatePlaylistControlDetails(name)
      --if DebugFunction then print('PLAYLIST '..name..'--------------------------------------') end
      local kvp_  = { ['name'] = name }
      local i,playlist_ = helper.GetArrayItemWithKey(playlists, kvp_)
      if playlist_ then
        if DebugFunction then
          --if i~=nil then print('i:'..i) end
          --if playlist_==nil then print('playlist_==nil') end
          --if playlist_.name~=nil then print('name"'..playlist_.name) end
          --if playlist_.img~=nil then print('img"'..playlist_.img) end
        end
        --helper.TablePrint(playlist_,2)
        if Controls.PlaylistNames.String == playlist_.name then
          Controls.PlaylistDetails.Choices = helper.UpdateItems(playlist_)
        end
        --if DebugFunction then print('get image url: '..playlist_.img) end
        local url = 'http://'..Controls.IPAddress.String..playlist_.img
        --if DebugTx then print("Sending image GET request: " .. url) end
        -- not using GetRequest() because it formats the '?' and '=' badly
        HttpClient.Download({ 
          Url          = url,
          Method       = "GET",
          Headers      =  { ["Accept"] = "*/*" } ,
          User         = Controls["Username"].String or "",  -- Only needed if device requires a sign in
          Password     = Controls["Password"].String or "",  -- Only needed if device requires a sign in
          Timeout      = RequestTimeout,
          EventHandler = function(tbl, code, data, err, headers)
            --if DebugFunction then print("HTTP image["..i.."] Response Handler called. Code: " .. code) end
            if code == 200 then  -- Vaild response
              if headers["Content-Type"]~=nil and headers["Content-Type"]:match('^image')~=nil then -- headers["Content-Type"]=="image/png"
                playlist_images[i] = data
                if Controls.PlaylistNames.String == playlists[i].name then
                  --if DebugFunction then print("playlists["..i.."].name: " .. playlists[i].name) end
                  UpdateLogo(data, Controls.PlaylistLogo)
                  if DebugFunction then print('UpdatePlaylistControlDetails: UpdateLogo for '..playlists[i].name..' - len: '..#data) end
                end
              end
            end
          end
        })
      end
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse initial response
  	-----------------------------------------------------------------------------------------------------------------------
  	function QueryDevices()
      if DebugFunction then print('QueryDevices (total: '..#devices..', defined: '..#Controls['DeviceSelect']..')') end
      GetRequest(Path.."/devices")	
      if #devices>0  then
        for i=1, #devices do
          GetRequest(Path.."/devices/"..devices[i]['mac'])
        end
      end
    end
  
    function QueryChannels()
      if DebugFunction then print('QueryChannels') end
      GetRequest(Path.."/channels")
    end
  
    function QueryPlaylists()
      if DebugFunction then print('QueryPlaylists') end
      GetRequest(Path.."/playlists")
    end
  
    function QueryAll()
  		if DebugFunction then print('Query all') end
      QueryDevices()
      Timer.CallAfter(QueryChannels, 1) --wait 1 sec to avoid maximum execution
  		Timer.CallAfter(QueryPlaylists, 2) --wait 1 sec to avoid maximum execution 
  	end
  
    function ParseImage(img, idx)
      if DebugFunction then 
        if idx~=nil then 
          print('ParseImage('..idx..')')
          playlist_images[idx] = img
        else
          UpdateLogo(img, Controls.PlaylistLogo)
          if DebugFunction then print('ParseImage: UpdateLogo for '..idx..' - len: '..#img) end
        end
      end
    end
  
    function ParseString(str)
  		ParseImage(str)
  	end
  
  	function ParseResponse(json)
  	-- responses from the HTTP server, determine how to parse them here
      if json=='null' then
        if DebugFunction then print('ParseResponse: ', json) end
      else
      	local data_ = rapidjson.decode(json)
        if DebugFunction then print('ParseResponse', #json..' bytes') end
        if data_==nil then -- response is a string
          ParseImage(json)
        elseif data_[1]~=nil then -- response is an array
          if data_[1]['mac']~=nil then              -- devices
            ParseDevices(data_)
          elseif data_[1]['channelid']~=nil then    -- channels
            ParseChannels(data_)
          elseif data_[1]['orientation']~=nil then  -- playlists
            ParsePlaylists(data_)
          end
        elseif data_['mac']~=nil then -- response is a table
          ParseDevice(data_)
        end
        data_ = nil
      end
    end
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- HTTP comms functions
  	-------------------------------------------------------------------------------------------------------------------------
  	-- the core of this is copied from an example so there is some unused stuff
  	-- Constants
  	local StatusState = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5}  -- Status states in designer
  	-- Variables
  	local RequestTimeout = 10           -- Timeout of the connection in seconds
  	local Port = 80                     -- Port to use (if not 80 or 443)
  	-- Functions
  	-- Function that sets plugin status
  	function ReportStatus(state, msg)
  		if DebugFunction then print("ReportStatus() called:" .. state) end
  		local msg = msg or ""
  		Controls.Status.Value = StatusState[state]  -- Sets status state
  		Controls.Status.String = msg  -- Sets status message
  	end
  
  	-- Function reads response code, sets status and prints received data.
  	function ResponseHandler(tbl, code, data, err, headers)
  		if DebugFunction and DebugRx then print("HTTP Response Code: " .. code) end
  		if code == 200 then  -- Vaild response
  			ReportStatus("OK")
  			if DebugRx then print("Rx: ", data) end
  			--ResponseText.String = data
  			if headers["Content-Type"]~=nil and headers["Content-Type"]:match('^image')~=nil then -- headers["Content-Type"]=="image/png"
          ParseImage(data)
  			elseif headers["Content-Type"]~=nil and headers["Content-Type"]:match('^text') then -- headers["Content-Type"]=="text/plain"
  				ParseString(data)
        else
  			  ParseResponse(data)
        end
  
  		elseif code == 401.0 or Controls.IPAddress.String == "" then  -- Invalid Address handler
  			ReportStatus("MISSING", "Check TCP connection properties") 
  
  		else   -- Other error cases
  			ReportStatus("FAULT", err) 
  		end
  	end
  
  	-- Send an HTTP GET request to the defined
  	function GetRequest(path, headers)
  		if DebugFunction and DebugTx then print("GetRequest("..path..") called") end
  		-- Define any HTTP headers to sent
  		headers = headers or {
  			--["Content-Type"] = "text/html",
  			["Accept"] = "*/*"--"text/html"
  		}
  		-- Generate the URL of the request using HTTPClient formatter
  		url = HttpClient.CreateUrl({
  			["Host"] = 'http://'..Controls.IPAddress.String,
  			--["Port"] = Port,
  			["Path"] = path
  			--["Query"] = QueryData
  		})
      url = 'http://'..Controls.IPAddress.String..'/'..path
  
  		if DebugTx then print("Sending GET request: " .. url) end
  		HttpClient.Download({ 
  			Url          = url,
  			Method       = "GET",
  			Headers      = headers,
  			User         = Controls["Username"].String or "",  -- Only needed if device requires a sign in
  			Password     = Controls["Password"].String or "",  -- Only needed if device requires a sign in
  			Timeout      = RequestTimeout,
  			EventHandler = ResponseHandler
  		})
  	end
  
  	-- Send a POST request to the HTTP server
  	function PostRequest(path, data)
  		if DebugFunction then print("PostRequest("..path.."): "..(data or '')) end
  		-- Define any HTTP headers to sent
  		headers = {  
  			["Accept"] = "*/*"
  		}
  		if data and #data then headers["Content-Type"] = "application/json" end
  		
  		-- Generate the URL of the request using HTTPClient formatter
  		url = HttpClient.CreateUrl({
  			["Host"] = 'http://'..Controls.IPAddress.String,
  			["Path"] = path
  		})
  
  		if DebugTx then print("Sending POST request to: " .. url, data) end
  		HttpClient.Upload({ 
  			Url          = url,
  			Headers      = headers,
  			User         = Controls["Username"].String,  -- Only needed if device requires a sign in
  			Password     = Controls["Password"].String,  -- Only needed if device requires a sign in
  			Data         = data,
  			Method       = "POST",
  			Timeout      = RequestTimeout,
  			EventHandler = ResponseHandler
  		})
  	end
  	-------------------------------------------------------------------------------
  	-- Device functions
  	-------------------------------------------------------------------------------
  	function initialize()
    	SetupDebugPrint()
  		if DebugFunction then 
        print("initialize() Called") 
        helper.GetVersion()
      end
      load_tv_channel_images()
      load_event_handlers()
   
  		--ClearDevices() -- only do this if you want to reset all the modules
      if Controls.IPAddress.String~=nil and string.len(Controls.IPAddress.String)>0 then
        --GetRequest(Path.."/devices")
        QueryAll()
        Timer.CallAfter(function() QueryAll() end, 5) --wait x sec to avoid maximum execution
        if not QueryTimer:IsRunning() then
          QueryTimer.EventHandler = QueryAll
          --if Device.IsEmulating then QueryTimer:Start(10) end
          QueryTimer:Start(Properties["Poll Interval"].Value)
        else
          print("Query timer is already running")
        end
  		else
  			print("I can't do anything without a Server address!")
  		end
      --local logo_ = ""
      --Controls.PlaylistLogo.Style = rapidjson.encode({IconData = logo_})
  	end
  	initialize()
  	-----------------------------------------------------------------------------------------------------------------------
  	-- EventHandlers
  	-----------------------------------------------------------------------------------------------------------------------
    Controls.IPAddress.EventHandler = initialize
  
    Controls.DeviceNames.EventHandler = function(ctl)
      if DebugFunction then print('device choice', ctl.String, ', num devices:', #devices) end
      local kvp_  = { ['name'] = ctl.String }
      local i,device_ = helper.GetArrayItemWithKey(devices, kvp_)
      if device_ then
        --[[
        print('device_ type:', type(device_))
        print('device_ name:', devices[i]['name'])
        print('device_ id:', devices[i]['id'])
        print('device_ mac:', devices[i]['mac'])
        --]]
        UpdateDeviceControlDetails(device_) -- update 'Decoder_details'
        GetRequest(Path.."/devices/"..devices[i]['mac'])
      end
  
    end
  
    Controls.PlaylistNames.EventHandler = function(ctl)
      if DebugFunction then print('playlist choice', ctl.String, ', num playlists:', #playlists) end
      UpdatePlaylistControlDetails(ctl.String)
    end
  
    Controls.ChannelNames.EventHandler = function(ctl) 
      if DebugFunction then print('channel choice', ctl.String, ', num channels:', #channels) end
      local kvp_  = { ['name'] = ctl.String }
      local i,channel_ = helper.GetArrayItemWithKey(channels, kvp_)
      if channel_ then
        --print('channel_ type:', type(channel_))
        UpdateChannelControlDetails(channel_)-- update 'Channel_details'
      end
    end
  
    Controls.QueryDevices.EventHandler = function()
      last_image = {} -- clear cache soo it forces an update
      QueryDevices()
    end
    Controls.QueryChannels.EventHandler = QueryChannels
    Controls.QueryPlaylists.EventHandler = QueryPlaylists
    Controls.LoadLogos.EventHandler = load_tv_channel_images
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- End of module
  	-----------------------------------------------------------------------------------------------------------------------
end
