-- Q-Sys plugin for Exterity IPTV server
-- <https://github.com/rod-driscoll/q-sys-plugin-exterity-iptv-server>
-- 20231128 v1.0.0 Rod Driscoll<rod@theavitgroup.com.au>

-- Information block for the plugin
PluginInfo = {
  Name = "Exterity~IPTV Server", -- The tilde here indicates folder structure in the Shematic Elements pane
  Version = "1.0.0",
  Id = "exterity-iptv-server.plugin.1.0.0",
  Description = "Plugin controlling Exterity IPTV",
  ShowDebug = true,
  Author = "Rod Driscoll"
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName()
	return "Exterity IPTV Server " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
local PageNames = {"Setup","System","Devices"} --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
	local props = {}
  table.insert(props,{
    Name = 'Display Count',
    Type = 'integer',
    Min = 1,
    Max = 255,
    Value = 2
  })
  table.insert(props,{
    Name  = "Poll Interval",
    Type  = "integer",
    Min   = 1,
    Max   = 255, 
    Value = 30
  })
  table.insert(props,{
    Name    = "Debug Print",
    Type    = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value   = "None"
  })
	return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
	return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  table.insert(ctrls, {
    Name         = "code",
    ControlType  = "Text",
    Count        = 1,
    UserPin      = true,
    PinStyle     = "Input"
  })
  
  -- Configuration Controls --
  table.insert(ctrls, {
    Name         = "IPAddress",
    ControlType  = "Text",
    Count        = 1,
    DefaultValue = "Enter an IP Address",
    UserPin      = true,
    PinStyle     = "Both"
  })
  table.insert(ctrls, {
    Name         = "Username",
    ControlType  = "Text",
    DefaultValue = "admin",
    Count        = 1,
    UserPin      = true,
    PinStyle     = "Both"
  })
  table.insert(ctrls, {
    Name         = "Password",
    ControlType  = "Text",
    DefaultValue = "",
    Count        = 1,
    UserPin      = true,
    PinStyle     = "Both"
  })
  
  -- Status Controls --
  table.insert(ctrls, {
    Name          = "Status",
    ControlType   = "Indicator",
    IndicatorType = Reflect and "StatusGP" or "Status",
    PinStyle      = "Output",
    UserPin       = true,
    Count         = 1
  })
  
  -- system configurations --
  table.insert(ctrls, {
    Name         = "DeviceNames",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "ChannelNames",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "PlaylistNames",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "DeviceDetails",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "ChannelDetails",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  table.insert(ctrls, {
    Name         = "PlaylistDetails",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = 1
  })
  
    -- Individual Devices --
  table.insert(ctrls, {
    Name         = "DeviceSelect",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "ChannelSelect",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PlaylistSelect",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PowerOnChannel",
    ControlType  = "Text",
    Style        = "ComboBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Details",
    ControlType  = "Text",
    Style        = "ListBox",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "CurrentContent",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "MACAddress",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Address",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Platform",
    ControlType  = "Indicator",
    IndicatorType= "Text",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "Online",
    ControlType  = "Indicator",
    IndicatorType= "Led",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "EnableDisplay",
    ControlType  = "Indicator",
    IndicatorType= "Led",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "HasDecoder",
    ControlType  = "Indicator",
    IndicatorType= "Led",
    PinStyle     = "Output",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  
  table.insert(ctrls, {
    Name         = "PowerOn",
    ControlType  = "Button",
    ButtonType   = "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PowerOff",
    ControlType  = "Button",
    ButtonType   = "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  table.insert(ctrls, {
    Name         = "PowerToggle",
    ControlType  = "Button",
    ButtonType   = "Toggle",
    PinStyle     = "Both",
    UserPin      = true,
    Count        = props['Display Count'].Value
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  	
  local colors = {  
    Background  = {232,232,232},
    Transparent = {255,255,255,0},
    Text        = {24,24,24},
    Header      = {0,0,0},
    Button      = {48,32,40},
    Red         = {217,32,32},
    DarkRed     = {80,16,16},
    Green       = {32,217,32},
    OKGreen     = {48,144,48},
    Blue        = {32,32,233},
    Black       = {0,0,0},
    White       = {255,255,255},
    Gray        = {96,96,96}
  }
  
  layout["code"]={PrettyName="code",Style="None"}  
  
  if(CurrentPage == 'Setup') then
    -- User defines connection properties
    table.insert(graphics,{Type="Text",Text="IP Address"    ,Position={ 15,35},Size={100,16},FontSize=14,HTextAlign="Right"})
    layout["IPAddress"] = {PrettyName="Settings~IP Address" ,Position={120,35},Size={100,16},Style="Text",Color=colors.White,FontSize=12}
  
    table.insert(graphics,{Type="Text",Text="Username"      ,Position={ 15,55},Size={100,16},FontSize=14,HTextAlign="Right"})
    layout["Username"] = {PrettyName="Settings~Username"    ,Position={120,55},Size={100,16},Style="Text",Color=colors.White,FontSize=12}
    
    table.insert(graphics,{Type="Text",Text="Password"      ,Position={ 15,75},Size={100,16},FontSize=14,HTextAlign="Right"})
    layout["Password"] = {PrettyName="Settings~Password"    ,Position={120,75},Size={100,16},Style="Text",Color=colors.White,FontSize=12}
  
    -- Status fields updated upon connect
    table.insert(graphics,{Type="GroupBox",Text="Status",Fill=colors.Background,StrokeWidth=1,CornerRadius=4,HTextAlign="Left",Position={5,135},Size={400,220}})
    layout["Status"] = {PrettyName="Status~Connection Status", Position={40,165}, Size={330,32}, Padding=4 }
    table.insert(graphics,{Type="Text",Text=GetPrettyName(),Position={15,200},Size={380,14},FontSize=10,HTextAlign="Right", Color=colors.Gray})
  
  elseif(CurrentPage == 'System') then 
  
    table.insert(graphics,{Type="Text",Text="Device names"            ,Position={ 10,   5},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["DeviceNames"] = {PrettyName="Settings~DeviceNames"        ,Position={ 10, 21},Size={140, 16},FontSize=12,Style="ComboBox"}
    table.insert(graphics,{Type="Text",Text="Device details"          ,Position={ 10, 37},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["DeviceDetails"] = {PrettyName="Settings~DeviceDetails"    ,Position={ 10, 53},Size={140, 90},FontSize=12,Style="ListBox"}
  
    table.insert(graphics,{Type="Text",Text="Playlist names"          ,Position={150,  5},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["PlaylistNames"] = {PrettyName="Settings~PlaylistNames"    ,Position={150, 21},Size={140, 16},FontSize=12,Style="ComboBox"}
    table.insert(graphics,{Type="Text",Text="Playlist details"        ,Position={150, 37},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["PlaylistDetails"] = {PrettyName="Settings~PlaylisDetails" ,Position={150, 53},Size={140, 90},FontSize=12,Style="ListBox"}
    
    table.insert(graphics,{Type="Text",Text="Channel names"           ,Position={290,  5},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["ChannelNames"] = {PrettyName="Settings~ChannelNames"      ,Position={290, 21},Size={140, 16},FontSize=12,Style="ComboBox"}
    table.insert(graphics,{Type="Text",Text="Channel details"         ,Position={290, 37},Size={140, 16},FontSize=14,HTextAlign="Center"})
    layout["ChannelDetails"] = {PrettyName="Settings~ChannelDetails"  ,Position={290, 53},Size={140, 90},FontSize=12,Style="ListBox"}  
  
  
  elseif(CurrentPage == 'Devices') then 
  
    local offset_= { 530, 176 } -- index, x-offset, y-offset
    local max_rows_ = 15
  
    for i=1, props['Display Count'].Value do
  
      x = offset_[1]*math.floor(((i-1)/max_rows_)+.05)
      y = offset_[2]*math.floor(((i-1)%max_rows_)+.05)
  
      table.insert(graphics,{Type="GroupBox",Text="Device "..i,Fill=colors.Background,StrokeWidth=1,CornerRadius=4,HTextAlign="Left",Position={14+x,5+y},Size={526,172}})
      -- column 1
      table.insert(graphics,{Type="Text",Text="Device select"                   ,Position={ 24+x, 28+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["DeviceSelect "..i] = {PrettyName="Device "..i.."~DeviceSelect"    ,Position={136+x, 28+y},Size={140, 16},FontSize=12,Style="ComboBox"}
      table.insert(graphics,{Type="Text",Text="Channel select"                  ,Position={ 24+x, 44+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["ChannelSelect "..i] = {PrettyName="Device "..i.."~ChannelSelect"  ,Position={136+x, 44+y},Size={140, 16},FontSize=12,Style="ComboBox"}
      table.insert(graphics,{Type="Text",Text="Playlist select"                 ,Position={ 24+x, 60+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["PlaylistSelect "..i] = {PrettyName="Device "..i.."~PlaylistSelect",Position={136+x, 60+y},Size={140, 16},FontSize=12,Style="ComboBox"}
      
      table.insert(graphics,{Type="Text",Text="Power on"                        ,Position={ 24+x, 76+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["PowerOn "..i] = {PrettyName="Device "..i.."~PowerOn"              ,Position={134+x, 76+y},Size={ 36, 16},FontSize=12,Style="Button"}
      table.insert(graphics,{Type="Text",Text="Power off"                       ,Position={ 24+x, 92+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["PowerOff "..i] = {PrettyName="Device "..i.."~PowerOff"            ,Position={134+x, 92+y},Size={ 36, 16},FontSize=12,Style="Button"}
      table.insert(graphics,{Type="Text",Text="Power toggle"                    ,Position={ 24+x,108+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["PowerToggle "..i] = {PrettyName="Device "..i.."~PowerToggle"      ,Position={134+x,108+y},Size={ 36, 16},FontSize=12,Style="Button"}
      table.insert(graphics,{Type="Text",Text="Current content"                 ,Position={ 24+x,124+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["CurrentContent "..i] = {PrettyName="Device "..i.."~CurrentContent",Position={134+x,124+y},Size={140, 32},FontSize=12,Style="Text",Color=colors.White}
      -- column 2
      table.insert(graphics,{Type="Text",Text="IP address"                      ,Position={276+x, 28+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["Address "..i] = {PrettyName="Device "..i.."~IPAddress"            ,Position={388+x, 28+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
      table.insert(graphics,{Type="Text",Text="MAC address"                     ,Position={276+x, 44+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["MACAddress "..i] = {PrettyName="Device "..i.."~MACAddress"        ,Position={388+x, 44+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
      table.insert(graphics,{Type="Text",Text="Platform"                        ,Position={276+x, 60+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["Platform "..i] = {PrettyName="Device "..i.."~Platform"            ,Position={388+x, 60+y},Size={140, 16},FontSize=12,Style="Text",Color=colors.White}
      table.insert(graphics,{Type="Text",Text="Device details"                  ,Position={276+x, 76+y},Size={110, 16},FontSize=14,HTextAlign="Right"})
      layout["DeviceDetails "..i] = {PrettyName="Device "..i.."~DeviceDetails"  ,Position={388+x, 76+y},Size={140, 90},FontSize=12,Style="ListBox"}
      
    end
  
  end;
  return layout, graphics
end

--Start event based logic
if Controls then
   
  	-----------------------------------------------------------------------------------------------------------------------
  	-- dependencies
  	-----------------------------------------------------------------------------------------------------------------------
  	rapidjson = require("rapidjson")
    helper = require("Helpers")
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Variables
  	-----------------------------------------------------------------------------------------------------------------------
  	local SimulateFeedback = true
  	-- Variables and flags
  	local DebugTx=false
  	local DebugRx=false
  	local DebugFunction=false
  
  	-- Timers, tables, and constants
  	QueryTimer = Timer.New()
  	--Timeout = Properties["Poll Interval"].Value + 10
  	
  	-- Device specific
  	local Path = 'api/public/control'
  
  	local devices = {}
  	local channels = {}
  	local playlists = {}
  	
  	function ErrorHandler(err)
      print('ERROR:', err)
   	end
     
  	-----------------------------------------------------------------------------------------------------------------------
    -- Helper functions
  	-------------------------------------------------------------------------------------------------------------------
  
    -- A function to determine common print statement scenarios for troubleshooting
    function SetupDebugPrint()
      if Properties["Debug Print"].Value=="Tx/Rx" then
        DebugTx,DebugRx=true,true
      elseif Properties["Debug Print"].Value=="Tx" then
        DebugTx=true
      elseif Properties["Debug Print"].Value=="Rx" then
        DebugRx=true
      elseif Properties["Debug Print"].Value=="Function Calls" then
        DebugFunction=true
      elseif Properties["Debug Print"].Value=="All" then
        DebugTx,DebugRx,DebugFunction=true,true,true
      end
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Device control functions
  	-----------------------------------------------------------------------------------------------------------------------
  
  	function UpdateDeviceControlDetails(device) -- selected device, data is a table of a single device
  		if DebugFunction then print('DEVICE ', '--------------------------------------') end	
      --[[ local keys_ = { 'id', 'type', 'ip', 'location', 'name', 'platform', 'state', 'mac', 'room', 'platform_name', 'lock_flag', 'status', 'flatMac', 'last_executed_command', 'jobs', 'content' }
      Controls.DeviceDetails.Choices = helper.UpdateItemsInArray(device, keys_)  --this is an option to display less data ]]
      --Controls.DeviceDetails.String = helper.UpdateItems(device)
      Controls.DeviceDetails.String =  "string 1\nstring 2" 
  	end
  
  	function DoFunctionOnDevice(func, control_name, name)
  		if DebugFunction then print('DoFunctionOnDevice()') end
  		--TODO
  	end
  
  	function GetPowerAndChannel(data) -- data is a single device
  		if DebugFunction then print('GetPowerAndChannel()') end
  		--TODO
  	end
  
  	function SetDevicePower(data, component, control) -- control == 'Power_on', 
  		if DebugFunction then print(control..' selected for', data.name, 'type:'..data['type'], 'platform:'..data['platform_name']) end
  		--TODO
  	end
  	
  	function UpdateDevice(component, data) -- data is a single device
  		if DebugFunction then print('UpdateDevice()') end
  		--TODO
  	end
  
  	function SetControl(data, control, value) -- (table, 'Power_On', true) -- data is a single device
  		if DebugFunction then print('SetControl()') end
  		--TODO
  	end
  
  	function AssignDevice(i, data) -- data is a single device
  		print('AssignDevice['..i..']: ', data['name'])
  		--TODO
  	end
  	
  	function CheckContent(device) -- device is a single device
  		if DebugFunction then print('CheckContent()') end
  		--TODO
  	end
  
  	function UpateDeviceData(i) -- 
  		if DebugFunction then print('UpateDeviceData()') end
  		--TODO
  	end
  
    function UpdateDeviceNames(data)  -- data is an array of devices
      local names_ = {}
      for a,b in ipairs(data) do --iterate through devices and create a table of names to update Choices
        if b['name'] then table.insert(names_, b['name']) end   
        --[[ -- this is just for debugging
        if b['name'] then  print('[1].name: ',b['name']) end
        if b['ip'] then table.insert(uris_, b['ip']) end   
        if b['mac'] then table.insert(macs_, b['mac']) end
        for k,v in pairs(b) do
          if a == 1 then print('['..a..']', k) end --print all keys
        end ]]
      end
      Controls.DeviceNames.Choices = names_ 
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse devices
  	-----------------------------------------------------------------------------------------------------------------------
  
  	function ParseDevice(device)  -- data is a single device
  		if DebugFunction then print('device data response: '..device['name']) end
  		local found_ = false
  		for i=1, #devices do --each device
  			if devices[i]['id'] == device['id'] then
  				print('Updating data in device ['..i..']: '.. devices[i]['name'])
  				devices[i] = device -- replace device
  				--CheckContent(devices[i]) -- this works
  				UpateDeviceData(i)
  				found_ = true
  			end
  		end
  		if not found_ then
  			table.insert(devices, data) 
  			UpdateDeviceNames(devices)
  			UpateDeviceData(#devices) -- update the last device
  		end
  	end
  
  	function ParseDevices(data)  -- data is an array of devices
  		if DebugFunction then print('ParseDevices', #data.. ' devices found') end
  		devices = data
  		UpdateDeviceNames(devices)
  	end
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse channels
  	-----------------------------------------------------------------------------------------------------------------------
  
  	function ParseChannels(data) -- data is an array of channels
  		if DebugFunction then print('channel data response: '..#data..' channels found') end
  		channels = data
  		local names_ = {}
  		for a,b in ipairs(data) do
  			--if a == 1 then PrintChannel(data[a]) end
  			if b['name'] then
  				--print('['..a..']', 'name:', b['name'])
  				table.insert(names_, b['name'])
  			end   
  		end  
      Controls.ChannelNames.Choices = names_
      for i=1, #devices do -- update channel list in the device modules
        if Controls["ChannelSelect "..i]~=nil then -- if device component exists
          Controls["ChannelSelect "..i].Choices = names_ -- update the device selector choices
        end
        if Controls["PowerOnChannel "..i]~=nil then -- if device component exists
          Controls["PowerOnChannel "..i].Choices = names_ -- update the device selector choices
        end
      end
  	end
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse Playlists
  	-----------------------------------------------------------------------------------------------------------------------
  
  	function ParsePlaylists(data) -- data is an array of playlists
  		if DebugFunction then print('playlist data response: '..#data..' playlists found') end
  		playlists = data
  		local names_ = {}
  		for a,b in ipairs(data) do
  			--if a == 1 then PrintChannel(data[a]) end
  			if b['name'] then
  				--print('['..a..']', 'name:', b['name'])
  				table.insert(names_, b['name'])
  			end   
  		end
      Controls.PlaylistNames.Choices = names_
      for i=1, #devices do -- update list in the device modules
        if Controls['PlaylistSelect '..i]~=nil then
          Controls['PlaylistSelect '..i].Choices = names_ -- update the device selector choices
        end
      end
  	end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- Parse initial response
  	-----------------------------------------------------------------------------------------------------------------------
  
  	function QueryAll()
  		if DebugFunction then print('Query all') end
  		for i=1, #devices do
  			GetRequest("/devices/"..devices[i]['mac'])
  		end
      Timer.CallAfter(function() GetRequest("/channels") end, 1) --wait 1 sec to avoid maximum execution
  		Timer.CallAfter(function() GetRequest("/playlists") end, 2) --wait 1 sec to avoid maximum execution 
  	end
  
  	function ParseResponse(json)
  	-- responses from the HTTP server, determine how to parse them here
  		local data_ = rapidjson.decode(json)
  		if DebugFunction then print('ParseResponse', #json..' bytes') end
  		if data_[1] then -- response is an array
  			if data_[1]['mac']~=nil then              -- devices
  				ParseDevices(data_)
  			elseif data_[1]['channelid']~=nil then    -- channels
  				ParseChannels(data_)
  			elseif data_[1]['orientation']~=nil then  -- playlists
  				ParsePlaylists(data_)
  			end
  		elseif data_['mac'] then -- response is a table
  			ParseDevice(data_)
  		end
  		data_ = nil
  	end
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- HTTP comms functions
  	-------------------------------------------------------------------------------------------------------------------------
  	-- the core of this is copied from an example so there is some unused stuff
  
  	-- Constants
  	local StatusState = { OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5}  -- Status states in designer
  
  	-- Variables
  	local RequestTimeout = 10           -- Timeout of the connection in seconds
  	local Port = 80                     -- Port to use (if not 80 or 443)
  
  	-- Functions
  	-- Function that sets plugin status
  	function ReportStatus(state, msg)
  		if DebugFunction then print("ReportStatus() called:" .. state) end
  		local msg = msg or ""
  		Controls.Status.Value = StatusState[state]  -- Sets status state
  		Controls.Status.String = msg  -- Sets status message
  	end
  
  	-- Function reads response code, sets status and prints received data.
  	function ResponseHandler(tbl, code, data, err, headers)
  		if DebugFunction then print("HTTP Response Handler called") end
  		if DebugRx then print("HTTP Response Code: " .. code) end
  		if code == 200 then  -- Vaild response
  			ReportStatus("OK")
  			if DebugRx then print("Rx: ", data) end
  			--ResponseText.String = data
  			ParseResponse(data)
  
  		elseif code == 401.0 or Controls.IPAddress.String == "" then  -- Invalid Address handler
  			ReportStatus("MISSING", "Check TCP connection properties") 
  
  		else   -- Other error cases
  			ReportStatus("FAULT", err) 
  		end
  	end
  
  	-- Send an HTTP GET request to the defined
  	function GetRequest(path)
  		if DebugFunction then print("GetRequest() called") end
  		-- Define any HTTP headers to sent
  		headers = {
  			--["Content-Type"] = "text/html",
  			["Accept"] = "*/*"--"text/html"
  		}
  		-- Generate the URL of the request using HTTPClient formatter
  		url = HttpClient.CreateUrl({
  			["Host"] = 'http://'..Controls.IPAddress.String,
  			--["Port"] = Port,
  			["Path"] = Path..path
  			--["Query"] = QueryData
  		})
  
  		if DebugTx then print("Sending GET request: " .. url) end
  		HttpClient.Download({ 
  			Url          = url,
  			Method       = "GET",
  			Headers      = headers,
  			User         = Controls["Username"].String or "",  -- Only needed if device requires a sign in
  			Password     = Controls["Password"].String or "",  -- Only needed if device requires a sign in
  			Timeout      = RequestTimeout,
  			EventHandler = ResponseHandler
  		})
  	end
  
  	-- Send a POST request to the HTTP server
  	function PostRequest(path, data)
  		if DebugFunction then print("PostRequest() called") end
  		-- Define any HTTP headers to sent
  		headers = {  
  			["Accept"] = "*/*"
  		}
  		if data and #data then headers["Content-Type"] = "application/json" end
  		
  		-- Generate the URL of the request using HTTPClient formatter
  		url = HttpClient.CreateUrl({
  			["Host"] = 'http://'..Controls.IPAddress.String,
  			["Path"] = Path..path
  		})
  
  		if DebugTx then print("Sending POST request to: " .. url, data) end
  		HttpClient.Upload({ 
  			Url          = url,
  			Headers      = headers,
  			User         = Controls["Username"].String,  -- Only needed if device requires a sign in
  			Password     = Controls["Password"].String,  -- Only needed if device requires a sign in
  			Data         = data,
  			Method       = "POST",
  			Timeout      = RequestTimeout,
  			EventHandler = ResponseHandler
  		})
  	end
  
  	-------------------------------------------------------------------------------
  	-- Device functions
  	-------------------------------------------------------------------------------
  
  	function initialize()
    	SetupDebugPrint()
  		if DebugFunction then print("initialize() Called") end
  		--ClearDevices() -- only do this if you want to reset all the modules
      if Controls.IPAddress.String~=nil and string.len(Controls.IPAddress.String)>0 and not QueryTimer:IsRunning() then
  			GetRequest("/devices")
  			Timer.CallAfter(function() GetRequest("/channels") end, 1) --wait 1 sec to avoid maximum execution
  			Timer.CallAfter(function() GetRequest("/playlists") end, 2) --wait 1 sec to avoid maximum execution
  			Timer.CallAfter(function() QueryAll() end, 3) --wait 1 sec to avoid maximum execution
  			QueryTimer.EventHandler = QueryAll
  			QueryTimer:Start(Properties["Poll Interval"].Value)
  		else
  			print("I can't do anything without a Server address!")
  		end
  	end
  	initialize()
  
  	-----------------------------------------------------------------------------------------------------------------------
  	-- EventHandlers
  	-----------------------------------------------------------------------------------------------------------------------
    Controls.IPAddress.EventHandler = function()
      initialize()
    end
  
    Controls.DeviceNames.EventHandler = function(ctl)
      if DebugFunction then print('device choice', ctl.String, ', num devices:', #devices) end
      local kvp_  = { ['name'] = ctl.String }
      local i,device_ = helper.GetArrayItemWithKey(devices, kvp_)
      if device_ then
        --print('device_ type:', type(device_))
        UpdateDeviceControlDetails(device_) -- update 'Decoder_details'
      end
  
    end
  
    Controls.PlaylistNames.EventHandler = function()
  
    end
  
    Controls.ChannelNames.EventHandler = function()
  
    end
  	-----------------------------------------------------------------------------------------------------------------------
  	-- End of module
  	-----------------------------------------------------------------------------------------------------------------------
end
